/*
 * Ory APIs
 *
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: v0.2.0-alpha.60
 * Contact: support@ory.sh
 * Generated by: https://openapi-generator.tech
 */

/// IdTokenClaims : IDTokenClaims represent the claims used in open id connect requests



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdTokenClaims {
    #[serde(rename = "acr", skip_serializing_if = "Option::is_none")]
    pub acr: Option<String>,
    #[serde(rename = "amr", skip_serializing_if = "Option::is_none")]
    pub amr: Option<Vec<String>>,
    #[serde(rename = "at_hash", skip_serializing_if = "Option::is_none")]
    pub at_hash: Option<String>,
    #[serde(rename = "aud", skip_serializing_if = "Option::is_none")]
    pub aud: Option<Vec<String>>,
    #[serde(rename = "auth_time", skip_serializing_if = "Option::is_none")]
    pub auth_time: Option<String>,
    #[serde(rename = "c_hash", skip_serializing_if = "Option::is_none")]
    pub c_hash: Option<String>,
    #[serde(rename = "exp", skip_serializing_if = "Option::is_none")]
    pub exp: Option<String>,
    #[serde(rename = "ext", skip_serializing_if = "Option::is_none")]
    pub ext: Option<::std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "iat", skip_serializing_if = "Option::is_none")]
    pub iat: Option<String>,
    #[serde(rename = "iss", skip_serializing_if = "Option::is_none")]
    pub iss: Option<String>,
    #[serde(rename = "jti", skip_serializing_if = "Option::is_none")]
    pub jti: Option<String>,
    #[serde(rename = "nonce", skip_serializing_if = "Option::is_none")]
    pub nonce: Option<String>,
    #[serde(rename = "rat", skip_serializing_if = "Option::is_none")]
    pub rat: Option<String>,
    #[serde(rename = "sub", skip_serializing_if = "Option::is_none")]
    pub sub: Option<String>,
}

impl Default for IdTokenClaims {
    fn default() -> Self {
        Self::new()
    }
}

impl IdTokenClaims {
    /// IDTokenClaims represent the claims used in open id connect requests
    pub fn new() -> IdTokenClaims {
        IdTokenClaims {
                acr: None,
                amr: None,
                at_hash: None,
                aud: None,
                auth_time: None,
                c_hash: None,
                exp: None,
                ext: None,
                iat: None,
                iss: None,
                jti: None,
                nonce: None,
                rat: None,
                sub: None,
        }
    }
}


